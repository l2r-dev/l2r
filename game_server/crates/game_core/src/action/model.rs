use bevy::prelude::*;
use derive_more::From;
use num_enum::{IntoPrimitive, TryFromPrimitive};
use strum::{Display, EnumIter};

#[derive(Clone, Copy, Debug, From, PartialEq, Reflect)]
pub enum ActionId {
    Core(CoreAction),
    Servitor(ServitorAction),
    Special(SpecialAction),
}

impl From<ActionId> for u32 {
    fn from(id: ActionId) -> Self {
        match id {
            ActionId::Core(id) => id.into(),
            ActionId::Servitor(id) => id.into(),
            ActionId::Special(id) => id.into(),
        }
    }
}

impl From<ActionId> for i32 {
    fn from(id: ActionId) -> Self {
        match id {
            ActionId::Core(id) => u32::from(id) as i32,
            ActionId::Servitor(id) => u32::from(id) as i32,
            ActionId::Special(id) => u32::from(id) as i32,
        }
    }
}

impl TryFrom<u32> for ActionId {
    type Error = &'static str;

    fn try_from(value: u32) -> Result<Self, Self::Error> {
        if let Ok(action) = CoreAction::try_from(value) {
            return Ok(ActionId::Core(action));
        }
        if let Ok(action) = ServitorAction::try_from(value) {
            return Ok(ActionId::Servitor(action));
        }
        if let Ok(action) = SpecialAction::try_from(value) {
            return Ok(ActionId::Special(action));
        }

        Err("Invalid ActionId")
    }
}

pub const DEFAULT_ACTIONS: [u32; 43] = [
    CoreAction::SitStand as u32,
    CoreAction::WalkRun as u32,
    CoreAction::Attack as u32,
    CoreAction::Exchange as u32,
    CoreAction::NextTarget as u32,
    CoreAction::PickUp as u32,
    CoreAction::Assist as u32,
    CoreAction::PrivateStoreSell as u32,
    CoreAction::PrivateStoreBuy as u32,
    CoreAction::Recommend as u32,
    CoreAction::GeneralManufacture as u32,
    CoreAction::StartEndRecordingReplay as u32,
    CoreAction::FindStore as u32,
    CoreAction::Duel as u32,
    CoreAction::Withdraw as u32,
    CoreAction::PrivateStorePackageSell as u32,
    CoreAction::MiniGame as u32,
    CoreAction::MyTeleports as u32,
    CoreAction::BotReportButton as u32,
    CoreAction::Invite as u32,
    CoreAction::LeaveParty as u32,
    CoreAction::DismissPartyMember as u32,
    CoreAction::PartyMatching as u32,
    CoreAction::ChangeOfPartyLeader as u32,
    CoreAction::CommandChannelInvitation as u32,
    CoreAction::PartyDuel as u32,
    CoreAction::Greeting as u32,
    CoreAction::Victory as u32,
    CoreAction::Advance as u32,
    CoreAction::Yes as u32,
    CoreAction::No as u32,
    CoreAction::Bow as u32,
    CoreAction::Unaware as u32,
    CoreAction::SocialWaiting as u32,
    CoreAction::Laugh as u32,
    CoreAction::Applaud as u32,
    CoreAction::Dance as u32,
    CoreAction::Sorrow as u32,
    CoreAction::Charm as u32,
    CoreAction::Shyness as u32,
    CoreAction::ExchangeBows as u32,
    CoreAction::HighFive as u32,
    CoreAction::CoupleDance as u32,
];

pub const ACTIONS_ON_TRANSFORM: [u32; 135] = [
    CoreAction::WalkRun as u32,
    CoreAction::Attack as u32,
    CoreAction::Exchange as u32,
    CoreAction::NextTarget as u32,
    CoreAction::PickUp as u32,
    CoreAction::Assist as u32,
    CoreAction::Invite as u32,
    CoreAction::LeaveParty as u32,
    CoreAction::DismissPartyMember as u32,
    CoreAction::PartyMatching as u32,
    CoreAction::ChangeMovementMode as u32,
    CoreAction::Attack2 as u32,
    CoreAction::Stop as u32,
    CoreAction::Pickup2 as u32,
    CoreAction::UnsummonPet as u32,
    CoreAction::ChangeMovementModePets as u32,
    CoreAction::AttackPets as u32,
    CoreAction::StopPets as u32,
    CoreAction::SwitchMode as u32,
    CoreAction::ToxicSmoke as u32,
    CoreAction::ParasiteBurst as u32,
    CoreAction::Recommend as u32,
    CoreAction::WildHogCannonAttack as u32,
    CoreAction::SelfDamageShield as u32,
    CoreAction::HydroScrew as u32,
    CoreAction::BoomAttack as u32,
    CoreAction::MasterRecharge as u32,
    CoreAction::MegaStormStrike as u32,
    CoreAction::StealBlood as u32,
    CoreAction::MechCannon as u32,
    CoreAction::ChangeOfPartyLeader as u32,
    CoreAction::UnsummonServitor as u32,
    CoreAction::MoveToTargetServitors as u32,
    CoreAction::MoveToTargetPets as u32,
    CoreAction::StartEndRecordingReplay as u32,
    CoreAction::CommandChannelInvitation as u32,
    CoreAction::FindStore as u32,
    CoreAction::MiniGame as u32,
    CoreAction::MyTeleports as u32,
    CoreAction::BotReportButton as u32,
    CoreAction::ExitAirship as u32,
    // TODO: Not shure that we need all this AdvancedAction, possibly it should be filtered by tranform
    ServitorAction::SiegeGolemSiegeHammer as u32,
    ServitorAction::SinEaterUltimateBombasticBuster as u32,
    ServitorAction::WindHatchlingStriderWildStun as u32,
    ServitorAction::WindHatchlingStriderWildDefence as u32,
    ServitorAction::StarHatchlingStriderBrightBurst as u32,
    ServitorAction::StarHatchlingStriderBrightHeal as u32,
    ServitorAction::FelineQueenBlessingOfQueen as u32,
    ServitorAction::FelineQueenGiftOfQueen as u32,
    ServitorAction::FelineQueenCureOfQueen as u32,
    ServitorAction::UnicornSeraphimBlessingOfSeraphim as u32,
    ServitorAction::UnicornSeraphimGiftOfSeraphim as u32,
    ServitorAction::UnicornSeraphimCureOfSeraphim as u32,
    ServitorAction::NightshadeCurseOfShade as u32,
    ServitorAction::NightshadeMassCurseOfShade as u32,
    ServitorAction::NightshadeShadeSacrifice as u32,
    ServitorAction::CursedManCursedBlow as u32,
    ServitorAction::CursedManCursedStun as u32,
    ServitorAction::CursedManCursedDrainEnergy as u32,
    ServitorAction::KatTheCatSkill2 as u32,
    ServitorAction::MewTheCatSkill2 as u32,
    ServitorAction::KaiTheCatSkill2 as u32,
    ServitorAction::BoxerTheUnicornSkill2 as u32,
    ServitorAction::MirageTheUnicornSkill2 as u32,
    ServitorAction::MerrowTheUnicornSkill2 as u32,
    ServitorAction::ShadowSkill1 as u32,
    ServitorAction::ShadowSkill2 as u32,
    ServitorAction::SilhouetteSkill2 as u32,
    ServitorAction::ReanimatedManSkill1 as u32,
    ServitorAction::ReanimatedManSkill2 as u32,
    ServitorAction::CorruptedManSkill2 as u32,
    ServitorAction::FelineKingSlash as u32,
    ServitorAction::FelineKingSpinningSlash as u32,
    ServitorAction::FelineKingHoldOfKing as u32,
    ServitorAction::MagnusTheUnicornWhiplash as u32,
    ServitorAction::MagnusTheUnicornTidalWave as u32,
    ServitorAction::SpectralLordCorpseKaboom as u32,
    ServitorAction::SpectralLordDicingDeath as u32,
    ServitorAction::SpectralLordDarkCurse as u32,
    ServitorAction::SwoopCannonCannonFodder as u32,
    ServitorAction::SwoopCannonBigBang as u32,
    ServitorAction::GreatWolfBiteAttack as u32,
    ServitorAction::GreatWolfMaul as u32,
    ServitorAction::GreatWolfCryOfTheWolf as u32,
    ServitorAction::GreatWolfAwakening as u32,
    ServitorAction::GreatWolfHowl as u32,
    ServitorAction::StriderRoar as u32,
    ServitorAction::DivineBeastBite as u32,
    ServitorAction::DivineBeastStunAttack as u32,
    ServitorAction::DivineBeastFireBreath as u32,
    ServitorAction::DivineBeastRoar as u32,
    ServitorAction::FelineQueenBlessTheBody as u32,
    ServitorAction::FelineQueenBlessTheSoul as u32,
    ServitorAction::FelineQueenHaste as u32,
    ServitorAction::UnicornSeraphimAcumen as u32,
    ServitorAction::UnicornSeraphimClarity as u32,
    ServitorAction::UnicornSeraphimEmpower as u32,
    ServitorAction::UnicornSeraphimWildMagic as u32,
    ServitorAction::NightshadeDeathWhisper as u32,
    ServitorAction::NightshadeFocus as u32,
    ServitorAction::NightshadeGuidance as u32,
    ServitorAction::WildBeastFighterDeathBlow as u32,
    ServitorAction::WildBeastFighterDoubleAttack as u32,
    ServitorAction::WildBeastFighterSpinAttack as u32,
    ServitorAction::WildBeastFighterMeteorShower as u32,
    ServitorAction::FoxShamanFairyPrincessAwakening as u32,
    ServitorAction::FoxShamanSpiritShamanThunderBolt as u32,
    ServitorAction::FoxShamanSpiritShamanFlash as u32,
    ServitorAction::FoxShamanSpiritShamanLightningWave as u32,
    ServitorAction::FoxShamanFairyPrincessFlare as u32,
    ServitorAction::WhiteWeaselFairyPrincessImprovedPetsBuffControl as u32,
    ServitorAction::TigressPowerStrike as u32,
    ServitorAction::ToyKnightPiercingAttack as u32,
    ServitorAction::ToyKnightWhirlwind as u32,
    ServitorAction::ToyKnightLanceSmash as u32,
    ServitorAction::ToyKnightBattleCry as u32,
    ServitorAction::TurtleAsceticPowerSmash as u32,
    ServitorAction::TurtleAsceticEnergyBurst as u32,
    ServitorAction::TurtleAsceticShockwave as u32,
    ServitorAction::TurtleAsceticHowl as u32,
    ServitorAction::PhoenixRush as u32,
    ServitorAction::PhoenixCleanse as u32,
    ServitorAction::PhoenixFlameFeather as u32,
    ServitorAction::PhoenixFlameBeak as u32,
    ServitorAction::SwitchState as u32,
    ServitorAction::DeinonychusTailStrike as u32,
    ServitorAction::GuardiansStriderStriderBite as u32,
    ServitorAction::GuardiansStriderStriderFear as u32,
    ServitorAction::GuardiansStriderStriderDash as u32,
    ServitorAction::MaguenStrike as u32,
    ServitorAction::MaguenWindWalk as u32,
    ServitorAction::EliteMaguenPowerStrike as u32,
    ServitorAction::EliteMaguenWindWalk as u32,
    ServitorAction::MaguenReturn as u32,
    ServitorAction::EliteMaguenPartyReturn as u32,
];

#[derive(
    EnumIter,
    Display,
    Default,
    Copy,
    Event,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    TryFromPrimitive,
    IntoPrimitive,
    Reflect,
)]
#[repr(u32)]
//TODO: Действия питомцев перетащить в ServitorAction
pub enum CoreAction {
    #[default]
    SitStand = 0,
    WalkRun,
    Attack,
    Exchange,
    NextTarget,
    PickUp,
    Assist,
    Invite,
    LeaveParty,
    DismissPartyMember,
    PrivateStoreSell,
    PartyMatching,
    Greeting,
    Victory,
    Advance,
    ChangeMovementMode,
    Attack2,
    Stop,
    Pickup2,
    UnsummonPet,
    SpecialSkill1,
    ChangeMovementModePets,
    AttackPets,
    StopPets,
    Yes,
    No,
    Bow,
    SpecialSkill2,
    PrivateStoreBuy,
    Unaware,
    SocialWaiting,
    Laugh,
    SwitchMode,
    Applaud,
    Dance,
    Sorrow,
    ToxicSmoke,
    DwarvenManufacture,
    MountDismount,
    ParasiteBurst,
    Recommend,
    WildHogCannonAttack,
    SelfDamageShield,
    HydroScrew,
    BoomAttack,
    MasterRecharge,
    MegaStormStrike,
    StealBlood,
    MechCannon,
    WildTemper,
    ChangeOfPartyLeader,
    GeneralManufacture,
    UnsummonServitor,
    MoveToTargetServitors,
    MoveToTargetPets,
    StartEndRecordingReplay,
    CommandChannelInvitation,
    FindStore,
    Duel,
    Withdraw,
    PartyDuel,
    PrivateStorePackageSell,
    Charm,
    MiniGame,
    MyTeleports,
    BotReportButton,
    Shyness,
    Steer,
    CancelControl,
    DestinationMap,
    ExitAirship,
    ExchangeBows,
    HighFive,
    CoupleDance,
}
impl From<ActionId> for CoreAction {
    fn from(id: ActionId) -> Self {
        match id {
            ActionId::Core(id) => id,
            _ => panic!("Invalid conversion"),
        }
    }
}

#[derive(
    EnumIter,
    Display,
    Copy,
    Event,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    TryFromPrimitive,
    IntoPrimitive,
    Reflect,
)]
#[repr(u32)]
//TODO: еще должны быть команды на атаку, перемещение к цели и пикап
pub enum ServitorAction {
    SiegeGolemSiegeHammer = 1000,
    SinEaterUltimateBombasticBuster,
    HostileFeeling,
    WindHatchlingStriderWildStun,
    WindHatchlingStriderWildDefence,
    StarHatchlingStriderBrightBurst,
    StarHatchlingStriderBrightHeal,
    FelineQueenBlessingOfQueen,
    FelineQueenGiftOfQueen,
    FelineQueenCureOfQueen,
    UnicornSeraphimBlessingOfSeraphim,
    UnicornSeraphimGiftOfSeraphim,
    UnicornSeraphimCureOfSeraphim,
    NightshadeCurseOfShade,
    NightshadeMassCurseOfShade,
    NightshadeShadeSacrifice,
    CursedManCursedBlow,
    CursedManCursedStun,
    CursedManCursedDrainEnergy,
    KatTheCatSkill2,
    MewTheCatSkill2,
    KaiTheCatSkill2,
    BoxerTheUnicornSkill2,
    MirageTheUnicornSkill2,
    MerrowTheUnicornSkill2,
    ShadowSkill1,
    ShadowSkill2,
    SilhouetteSkill2,
    ReanimatedManSkill1,
    ReanimatedManSkill2,
    CorruptedManSkill2,
    FelineKingSlash,
    FelineKingSpinningSlash,
    FelineKingHoldOfKing,
    MagnusTheUnicornWhiplash,
    MagnusTheUnicornTidalWave,
    SpectralLordCorpseKaboom,
    SpectralLordDicingDeath,
    SpectralLordDarkCurse,
    SwoopCannonCannonFodder,
    SwoopCannonBigBang,
    GreatWolfBiteAttack,
    GreatWolfMaul,
    GreatWolfCryOfTheWolf,
    GreatWolfAwakening,
    GreatWolfHowl,
    StriderRoar,
    DivineBeastBite,
    DivineBeastStunAttack,
    DivineBeastFireBreath,
    DivineBeastRoar,
    FelineQueenBlessTheBody,
    FelineQueenBlessTheSoul,
    FelineQueenHaste,
    UnicornSeraphimAcumen,
    UnicornSeraphimClarity,
    UnicornSeraphimEmpower,
    UnicornSeraphimWildMagic,
    NightshadeDeathWhisper,
    NightshadeFocus,
    NightshadeGuidance,
    WildBeastFighterDeathBlow,
    WildBeastFighterDoubleAttack,
    WildBeastFighterSpinAttack,
    WildBeastFighterMeteorShower,
    FoxShamanFairyPrincessAwakening,
    FoxShamanSpiritShamanThunderBolt,
    FoxShamanSpiritShamanFlash,
    FoxShamanSpiritShamanLightningWave,
    FoxShamanFairyPrincessFlare,
    WhiteWeaselFairyPrincessImprovedPetsBuffControl,
    TigressPowerStrike,
    ToyKnightPiercingAttack,
    ToyKnightWhirlwind,
    ToyKnightLanceSmash,
    ToyKnightBattleCry,
    TurtleAsceticPowerSmash,
    TurtleAsceticEnergyBurst,
    TurtleAsceticShockwave,
    TurtleAsceticHowl,
    PhoenixRush,
    PhoenixCleanse,
    PhoenixFlameFeather,
    PhoenixFlameBeak,
    SwitchState,
    Unkown1,
    PantherCancel,
    PantherDarkClaw,
    PantherFatalClaw,
    DeinonychusTailStrike,
    GuardiansStriderStriderBite,
    GuardiansStriderStriderFear,
    GuardiansStriderStriderDash,
    MaguenStrike,
    MaguenWindWalk,
    EliteMaguenPowerStrike,
    EliteMaguenWindWalk,
    MaguenReturn,
    EliteMaguenPartyReturn,
}
impl From<ActionId> for ServitorAction {
    fn from(id: ActionId) -> Self {
        match id {
            ActionId::Servitor(id) => id,
            _ => panic!("Invalid conversion"),
        }
    }
}

#[derive(
    EnumIter,
    Display,
    Copy,
    Event,
    Debug,
    Clone,
    PartialEq,
    Eq,
    Hash,
    TryFromPrimitive,
    IntoPrimitive,
    Reflect,
)]
#[repr(u32)]
pub enum SpecialAction {
    HandOfWarmth = 5000,
    RosySeduction,
    CriticalSeduction,
    ThunderBolt,
    Flash,
    LightningWave,
    BuffControl,
    PiercingAttack,
    SpinAttack,
    Impale,
    BattleCry,
    PowerSmash,
    EnergyBurst,
    Shockwave,
    Burst,
    SwitchTactics,
    CatTheRangerBoost,
}
impl From<ActionId> for SpecialAction {
    fn from(id: ActionId) -> Self {
        match id {
            ActionId::Special(id) => id,
            _ => panic!("Invalid conversion"),
        }
    }
}
